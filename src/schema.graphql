### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Channel {
  author: User
  community: Community!
  createdAt: DateTime!
  description: String
  id: String!
  isPrivate: Boolean!
  messages: [Message!]!
  name: String!
  notifications: [Notification!]!
  typingUsers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  url: String!
  userData(after: ChannelInfoWhereUniqueInput, before: ChannelInfoWhereUniqueInput, first: Int, last: Int, skip: Int): [ChannelInfo!]!
}

type ChannelInfo {
  channel: Channel!
  id: String!
  lastUpdateAt: DateTime!
  uniqueUserChannelPair: String!
  user: User!
}

input ChannelInfoWhereUniqueInput {
  id: String
  uniqueUserChannelPair: String
}

type Community {
  author: User
  channels: [Channel!]!
  description: String
  id: String!
  image: String
  isPrivate: Boolean!
  members: [User!]!
  name: String!
  notifications: [Notification!]!
  url: String!
}

type Count {
  count: Int!
}

scalar DateTime

type File {
  encoding: String!
  filename: String!
  filesize: String
  id: String!
  Key: String!
  message: Message
  mimetype: String!
  uploader: User!
}

input FileWhereUniqueInput {
  id: String
  Key: String
}

type Message {
  attachments: [File!]!
  author: User!
  body: String
  channel: Channel
  children: [ReplyMessage!]!
  createdAt: DateTime!
  id: String!
  reactions: [Reaction!]!
  remoteAttachments: [RemoteAttachment!]!
  updatedAt: DateTime!
}

type Mutation {
  attachRoleToUser(roleId: String!, userId: String!): User!
  createChannel(communityUrl: String, description: String, isPrivate: Boolean, name: String, url: String): Channel!
  createCommunity(description: String, image: String, isPrivate: Boolean, name: String, url: String): Community!
  createRole(color: String, roleSettings: String, title: String): Role!
  deattachRoleToUser(roleId: String!, userId: String!): User!
  deleteFile(Key: String): String!
  deleteMessage(messageId: String): Message!
  deleteReplyMessage(messageId: String): ReplyMessage!
  deleteRole(id: String): Role!
  editChannel(channelId: String, description: String, name: String): Channel!
  editMessage(body: String, messageId: String): Message!
  editReplyMessage(body: String, messageId: String): ReplyMessage!
  followCommunity(url: String): Community!
  login(email: String!, password: String!, social: String!): AuthPayload!
  logout: User!
  markChannelNotificationsAsRead(channelUrl: String): Notification!
  markCommunityNotificationsAsRead(communityUrl: String): Notification!
  markNotificationAsRead(id: String): Count!
  markNotificationsAsRead(type: String): Count!
  replyMessage(attachments: [String!], body: String, parentId: String, urlList: [String!]): ReplyMessage!
  searchMessages(channelUrl: String, searchQuery: String): [Message!]!
  sendMessage(attachments: [String!], body: String, channelUrl: String, communityUrl: String, mentions: [String!], urlList: [String!]): Message!
  sendNotification(channelUrl: String, communityUrl: String, messageId: ID, receiverName: String, type: String): Notification!
  setCurrentChannel(channelUrl: String): User!
  setUserTypingStatus(channelUrl: String, isTyping: Boolean): TypingStatus!
  signup(bio: String, email: String!, fullname: String!, password: String!, username: String!): AuthPayload!
  toggleReaction(messageId: String, name: String): Reaction!
  unfollowCommunity(url: String): Community!
  updateChannelInfo(channelUrl: String!, date: String!): User!
  updateRole(color: String, id: String, roleSettings: String, title: String): Role!
  updateUser(email: String!, fullname: String!, image: String, username: String!): User!
  uploadFile(file: Upload): File!
  uploadFiles(files: [Upload!]!): [File!]!
  users(searchString: String): [User!]!
}

type Notification {
  action: String
  body: String
  channel: Channel
  community: Community
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: Message
  receiver: User!
  sender: User!
  type: String
}

input NotificationWhereUniqueInput {
  id: String
}

type OnlinePayload {
  id: String!
  isOnline: String!
  user: User!
}

type Query {
  allMessages(channelUrl: String): [Message!]!
  channel(url: String): Channel
  channelNotifications(channelUrl: String): [Notification!]!
  channels(communityUrl: String): [Channel!]!
  communities: [Community!]!
  community(id: ID, url: String): Community
  communityNotifications(communityUrl: String): [Notification!]!
  files(after: ID): [File!]!
  getLastMessages(channelUrl: String, cursorId: ID, lastVisitDate: String, number: String): [Message!]!
  getNextMessages(channelUrl: String, cursorId: ID, number: String): [Message!]!
  getPrevMessages(channelUrl: String, cursorId: ID, number: String): [Message!]!
  getUnreadMessagesCount(channelUrl: String, username: String): UnreadMessagePayload!
  getUser(username: String!): TwitterPayload!
  me: User!
  messageReplies(after: ID, messageId: String): [ReplyMessage!]!
  notifications: [Notification!]!
  privateChannels: [Channel!]!
  reactions(messageId: String): [Reaction!]!
  replyMessages(after: ID, channelUrl: String): [Message!]!
  roles: [Role!]!
  searchCommunities(searchString: String): [Community!]!
  searchMessages(channelUrl: String, searchQuery: String): [Message!]!
  unreadNotifications: [Notification!]!
  userFiles(after: ID, userId: ID): [File!]!
  users(searchString: String): [User!]!
}

type Reaction {
  createdAt: DateTime!
  id: String!
  message: Message!
  name: String!
  updatedAt: DateTime!
  users: [User!]!
}

type RemoteAttachment {
  description: String
  id: String!
  parentMessage: Message
  parentReplyMessage: ReplyMessage
  preview: String
  siteName: String
  title: String!
  url: String!
  videoLink: String
}

type ReplyMessage {
  attachments(after: FileWhereUniqueInput, before: FileWhereUniqueInput, first: Int, last: Int, skip: Int): [File!]!
  author: User!
  body: String!
  createdAt: DateTime!
  id: String!
  parent: Message!
  remoteAttachments: [RemoteAttachment!]!
  updatedAt: DateTime!
}

input ReplyMessageWhereUniqueInput {
  id: String
}

type Role {
  color: String!
  createdAt: DateTime!
  id: String!
  roleSettings: String!
  title: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

type Subscription {
  channelNewMessage(communityUrl: String, tenant: String): Channel!
  deleteMessage(channelUrl: String, tenant: String): Message
  editMessage(channelUrl: String, tenant: String): Message
  newMessage(channelUrl: String, tenant: String): Message!
  newNotification(receiverId: String, tenant: String): Notification!
  newReaction(channelUrl: String, tenant: String): Reaction
  removedReaction(channelUrl: String, tenant: String): Reaction
  updatedReaction(channelUrl: String, tenant: String): Reaction
  userTypingStatus(channelUrl: String, tenant: String, username: String): TypingStatus
  userWentOffline(tenant: String): User
  userWentOnline(tenant: String): User
}

type TwitterPayload {
  bio: String!
  followers: String!
  followings: String!
  user: User!
}

type TypingStatus {
  isTyping: Boolean!
  username: String!
}

type UnreadMessagePayload {
  fromNewUser: Boolean!
  messages: [Message!]!
  user: User!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  channelsInfo: [ChannelInfo!]!
  communitiesFollowed: [Community!]!
  communitiesOwned: [Community!]!
  currentChannel: Channel
  email: String
  files: [File!]!
  fullname: String!
  id: String!
  image: String
  isOnline: Boolean!
  messages: [Message!]!
  notificationsReceived(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [Notification!]!
  notificationsSend(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [Notification!]!
  owner: String
  password: String
  reactions: [Reaction!]!
  replyMessages(after: ReplyMessageWhereUniqueInput, before: ReplyMessageWhereUniqueInput, first: Int, last: Int, skip: Int): [ReplyMessage!]!
  role: [Role!]!
  social: String
  username: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
