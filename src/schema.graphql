### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Channel {
  author: User
  community: Community!
  createdAt: DateTime!
  description: String
  id: String!
  isPrivate: Boolean!
  messages: [Message!]!
  name: String!
  notifications: [Notification!]!
  typingUsers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  url: String!
  userData(after: ChannelInfoWhereUniqueInput, before: ChannelInfoWhereUniqueInput, first: Int, last: Int, skip: Int): [ChannelInfo!]!
}

type ChannelInfo {
  channel: Channel!
  id: String!
  lastUpdateAt: DateTime!
  uniqueUserChannelPair: String!
  user: User!
}

input ChannelInfoWhereUniqueInput {
  id: String
  uniqueUserChannelPair: String
}

type Community {
  author: User
  channels: [Channel!]!
  description: String
  id: String!
  image: String
  isPrivate: Boolean!
  members: [User!]!
  name: String!
  notifications: [Notification!]!
  url: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File {
  Key: String!
  encoding: String!
  filename: String!
  filesize: String
  id: String!
  message: Message
  mimetype: String!
  uploader: User!
}

input FileWhereUniqueInput {
  Key: String
  id: String
}

type Message {
  attachments: [File!]!
  author: User!
  body: String
  channel: Channel
  children: [ReplyMessage!]!
  createdAt: DateTime!
  id: String!
  reactions: [Reaction!]!
  remoteAttachments: [RemoteAttachment!]!
  updatedAt: DateTime!
}

type Notification {
  action: String
  body: String
  channel: Channel
  community: Community
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: Message
  receiver: User!
  sender: User!
  type: String
}

input NotificationWhereUniqueInput {
  id: String
}

type OnlinePayload {
  id: String!
  isOnline: String!
  user: User!
}

type Query {
  allMessages(channelUrl: String): Message
  channel(url: String): Channel
  channelNotifications(channelUrl: String): Notification
  channels(communityUrl: String): Channel
  communities: Community
  community(id: ID, url: String): Community
  communityNotifications(communityUrl: String): Notification
  files(after: ID): File
  getLastMessages(channelUrl: String, cursorId: ID, lastVisitDate: String, number: String): Message
  getNextMessages(channelUrl: String, cursorId: ID, number: String): Message
  getPrevMessages(channelUrl: String, cursorId: ID, number: String): Message
  getUnreadMessagesCount(channelUrl: String, username: String): UnreadMessagePayload
  getUser(username: String!): TwitterPayload
  me: User
  messageReplies(after: ID, messageId: String): ReplyMessage
  notifications: Notification
  privateChannels: Channel
  reactions(messageId: String): Reaction
  replyMessages(after: ID, channelUrl: String): Message
  roles: Role
  searchCommunities(searchString: String): Community
  searchMessages(channelUrl: String, searchQuery: String): Message
  unreadNotifications: Notification
  userFiles(after: ID, userId: ID): File
  users(searchString: String): User
}

type Reaction {
  createdAt: DateTime!
  id: String!
  message: Message!
  name: String!
  updatedAt: DateTime!
  users: [User!]!
}

type RemoteAttachment {
  description: String
  id: String!
  parentMessage: Message
  parentReplyMessage: ReplyMessage
  preview: String
  siteName: String
  title: String!
  url: String!
  videoLink: String
}

type ReplyMessage {
  attachments(after: FileWhereUniqueInput, before: FileWhereUniqueInput, first: Int, last: Int, skip: Int): [File!]!
  author: User!
  body: String!
  createdAt: DateTime!
  id: String!
  parent: Message!
  remoteAttachments: [RemoteAttachment!]!
  updatedAt: DateTime!
}

input ReplyMessageWhereUniqueInput {
  id: String
}

type Role {
  color: String!
  createdAt: DateTime!
  id: String!
  roleSettings: String!
  title: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

type TwitterPayload {
  bio: String!
  followers: String!
  followings: String!
  user: User!
}

type TypingStatus {
  isTyping: Boolean!
  username: String!
}

type UnreadMessagePayload {
  fromNewUser: Boolean!
  messages: [Message!]!
  user: User!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  channelsInfo: [ChannelInfo!]!
  communitiesFollowed: [Community!]!
  communitiesOwned: [Community!]!
  currentChannel: Channel
  email: String
  files: [File!]!
  fullname: String!
  id: String!
  image: String
  isOnline: Boolean!
  messages: [Message!]!
  notificationsReceived(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [Notification!]!
  notificationsSend(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [Notification!]!
  owner: String
  password: String
  reactions: [Reaction!]!
  replyMessages(after: ReplyMessageWhereUniqueInput, before: ReplyMessageWhereUniqueInput, first: Int, last: Int, skip: Int): [ReplyMessage!]!
  role: [Role!]!
  social: String
  username: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}