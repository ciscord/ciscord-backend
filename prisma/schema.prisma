// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                      String          @default(cuid()) @id
  fullname                String
  username                String          @unique
  bio                     String?
  email                   String?         @unique
  password                String?
  social                  String?
  image                   String?
  isOnline                Boolean         @default(true)
  communitiesOwned        Community[]     @relation(name: "UserCommunityAuthor")
  communitiesFollowed     Community[]     @relation(name: "UserCommunityMember")
  channelsInfo            ChannelInfo[]
  currentChannel          Channel?        @relation(name: "UserCurrentChannel", fields: [currentChannelId], references: [id])
  messages                Message[]
  files                   File[]
  replyMessages           ReplyMessage[]
  notificationsSend       Notification[]  @relation(name: "UserNotificationSender")
  notificationsReceived   Notification[]  @relation(name: "UserNotificationReceiver")
  reactions               Reaction[]
  role                    Role[]          @relation(name: "UserRoles")
  owner                   String?
  chanelAuthor            Channel?         @relation(name: "UserAuthor", fields: [chanelAuthorId], references: [id])
  typingUsers            Channel?         @relation(name: "UserTypingUsers", fields: [typingUsersId], references: [id])
  typingUsersId           String?
  currentChannelId           String?      @unique
  chanelAuthorId          String?        @unique
}

model Community {
  id                      String                    @default(cuid()) @id
  name                    String                    @unique
  url                     String                    @unique
  image                   String?
  description             String?
  isPrivate               Boolean                   @default(false)
  author                  User?                     @relation(name: "UserCommunityAuthor", fields: [authorId], references: [id])
  members                 User[]                    @relation(name: "UserCommunityMember")
  channels                Channel[]
  notifications           Notification[]
  authorId               String?
}

model Channel {
  id                      String          @default(cuid()) @id
  createdAt               DateTime        @default(now())
  name                    String
  url                     String          @unique
  description             String?
  isPrivate               Boolean         @default(false)
  community               Community       @relation(fields: [communityId], references: [id])
  author                  User?           @relation(name: "UserAuthor")
  messages                Message[]
  typingUsers             User[]          @relation(name: "UserTypingUsers")
  notifications           Notification[]
  userData                ChannelInfo[]
  communityId             String
  currentChannel          User?           @relation(name: "UserCurrentChannel")
}

model Message {
  id                      String             @default(cuid()) @id
  createdAt               DateTime           @default(now())
  updatedAt               DateTime            @updatedAt
  body                    String?
  channel                 Channel?            @relation(fields: [channelId], references: [id])
  author                  User                @relation(fields: [authorId], references: [id])
  attachments             File[]
  remoteAttachments       RemoteAttachment[]
  children                ReplyMessage[]
  reactions               Reaction[]
  authorId               String
  channelId               String?
  notification            Notification?
}

model ReplyMessage {
  id                      String              @default(cuid()) @id
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  body                    String
  author                  User                @relation(fields: [authorId], references: [id])
  attachments             File[]
  remoteAttachments       RemoteAttachment[]
  parent                  Message             @relation(fields: [parentId], references: [id])
  authorId               String
  parentId               String
}

model Reaction {
  id                      String          @default(cuid()) @id
  name                    String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  users                   User[]
  message                 Message       @relation(fields: [messageId], references: [id])
  messageId               String
}

model Notification {
  id                      String          @default(cuid()) @id
  createdAt               DateTime        @default(now())
  body                    String?
  type                    String?
  action                  String?
  message                 Message?        @relation(fields: [messageId], references: [id])
  channel                 Channel?         @relation(fields: [channelId], references: [id])
  community               Community?      @relation(fields: [communityId], references: [id])
  sender                  User            @relation(name: "UserNotificationSender", fields: [senderId], references: [id])
  receiver                User            @relation(name: "UserNotificationReceiver", fields: [receiverId], references: [id])
  isRead                  Boolean         @default(false)
  senderId               String
  receiverId               String
  messageId               String?         @unique
  channelId               String?
  communityId               String?
}

model File {
  id                      String          @default(cuid()) @id
  createdAt               DateTime        @default(now())
  filename                String
  mimetype                String
  filesize                String?
  message                 Message?        @relation(fields: [messageId], references: [id])
  replyMessage                 ReplyMessage?        @relation(fields: [replyMessageId], references: [id])
  encoding                String
  Key                     String          @unique
  uploader                User            @relation(fields: [uploaderId], references: [id])
  uploaderId               String
  messageId               String?
  replyMessageId               String?
}

model Role {
  id                      String          @default(cuid()) @id
  createdAt               DateTime        @default(now())
  title                   String          @unique
  roleSettings            String
  color                   String
  users                   User[]          @relation(name: "UserRoles")
}

model ChannelInfo {
  id                      String          @default(cuid()) @id
  channel                 Channel         @relation(fields: [channelId], references: [id])
  user                    User            @relation(fields: [userId], references: [id])
  lastUpdateAt            DateTime        @default(now())
  uniqueUserChannelPair   String          @unique
  channelId               String
  userId                 String
}

model RemoteAttachment {
  id                      String          @default(cuid()) @id
  title                   String
  description             String?
  siteName                String?
  url                     String
  preview                 String?
  videoLink               String?
  parentMessage           Message?        @relation(fields: [parentMessageId], references: [id])
  parentReplyMessage      ReplyMessage?   @relation(fields: [parentReplyMessageId], references: [id])
  parentReplyMessageId    String?
  parentMessageId         String?
}
